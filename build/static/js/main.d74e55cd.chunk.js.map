{"version":3,"sources":["ColoredRect.js","App.js","index.js"],"names":["ColoredRect","props","_this","Object","classCallCheck","this","_super","call","handleClick","setState","color","Konva","Util","getRandomColor","state","square","points","rad","react_default","a","createElement","ReactKonva","x","y","width","stroke","height","radius","React","Component","App","value","pi","konvaPoints","handleChange","bind","assertThisInitialized","handleSubmit","event","val","target","preventDefault","Number","calculatePi","alert","min","max","Math","random","n","parseInt","numPointsInCircle","numPointsTotal","i","getRandomArbitrary","push","pow","key","layer","destroyChildren","map","el","fill","_this2","name","onSubmit","id","type","onChange","window","innerWidth","innerHeight","src_ColoredRect","ref","rootElement","document","getElementById","ReactDOM","render","StrictMode","App_App"],"mappings":"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","file":"static/js/main.d74e55cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Circle, Layer, Rect, Line } from 'react-konva';\r\nimport Konva from 'konva';\r\n\r\n\r\nclass ColoredRect extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: 'green',\r\n      square: 750,\r\n      points: [],\r\n    }\r\n\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      color: Konva.Util.getRandomColor()\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let rad = this.state.square / 2\r\n    return (\r\n      <Layer>\r\n        <Rect\r\n          x={20}\r\n          y={20}\r\n          width={this.state.square}\r\n          stroke=\"black\"\r\n          height={this.state.square}\r\n        />\r\n        <Circle x={rad + 20} y={20 + rad} radius={rad} stroke=\"black\" />\r\n      </Layer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColoredRect;","import React from \"react\";\nimport \"./styles.css\";\nimport { Stage, Layer, Circle, Text } from 'react-konva';\nimport Konva from 'konva';\nimport ColoredRect from './ColoredRect'\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\", pi: 0, points: [], konvaPoints: <Circle/>};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    let val = event.target.value;\n    this.setState({ value: val });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let val = this.state.value;\n    if (!Number(val)) {\n      alert(\"The value must be a number\");\n    }\n    else {\n      this.calculatePi(val);\n    }\n  }\n\n  getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  calculatePi(n) {\n    n = parseInt(n,10);\n    let numPointsInCircle = 0;\n    let numPointsTotal = 0;\n    let x = 0;\n    let y = 0;\n    for (var i = 0; i < n; i++) {\n      x = this.getRandomArbitrary(-1, 1);\n      y = this.getRandomArbitrary(-1, 1);\n      this.state.points.push([x, y]);\n      if (x ** 2 + y ** 2 <= 1) {\n        numPointsInCircle++;\n      }\n      numPointsTotal++;\n    }\n    let pi = (4 * numPointsInCircle) / numPointsTotal;\n    let rad = 750/2;\n    let key = 0;\n    this.setState({ pi: pi });\n    this.layer.destroyChildren();\n    this.setState({konvaPoints: this.state.points.map(el => {\n      return (\n          <Circle key={key++} x={(el[0]*rad)+21+rad} y={((el[1]*rad)+21+rad)} radius={1} stroke=\"black\" fill=\"black\" />\n      )\n    })})\n  }\n\n \n\n\n  render() {\n    \n  \n    return (\n      <div>\n        <h1>Hello {this.props.name}</h1>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Name:\n            <input\n              id=\"piInput\"\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <h2>Value of Pi: {this.state.pi}</h2>\n        <Stage width={window.innerWidth} height={window.innerHeight}>\n          <ColoredRect points={this.state.points}/>\n          <Layer ref={ref => (this.layer = ref)}>\n            {this.state.konvaPoints}\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}